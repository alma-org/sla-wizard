global
    stats socket /run/haproxy.sock mode 660 level admin

defaults
    timeout connect 10s
    timeout client 1m
    timeout server 1m

frontend proxy
    bind :80
    mode http
    default_backend default-server
    use_backend once-per-second-endpoint if { path_beg /once-per-second-endpoint }
    use_backend twice-per-minute-endpoint if { path_beg /twice-per-minute-endpoint }


backend default-server
    mode http
    server default-server api:9999

backend once-per-second-endpoint
    mode http
    stick-table type binary len 20 size 100k expire 1s store http_req_rate(1s)

    # check for token parameter
    acl has_token hdr(token) -m found

    # check if token is valid
    acl valid_token hdr(token) -m str apikey1 apikey2 apikey3

    # check if exceeds limit
    acl exceeds_limit hdr(token),table_http_req_rate() gt 1

    # start tracking based on token parameter
    http-request track-sc0 hdr(token) unless exceeds_limit

    # Deny if missing token
    http-request deny deny_status 401 if !has_token

    # Deny if bad token
    http-request deny deny_status 403 if !valid_token

    # Deny if exceeds limit
    http-request deny deny_status 429 if exceeds_limit

    server once-per-second-endpoint api:9999

backend twice-per-minute-endpoint
    mode http
    stick-table type binary len 20 size 100k expire 1m store http_req_rate(1m)

    # check for token parameter
    acl has_token hdr(token) -m found

    # check if token is valid
    acl valid_token hdr(token) -m str apikey1 apikey2 apikey3

    # check if exceeds limit
    acl exceeds_limit hdr(token),table_http_req_rate() gt 2

    # start tracking based on token parameter
    http-request track-sc0 hdr(token) unless exceeds_limit

    # Deny if missing token
    http-request deny deny_status 401 if !has_token

    # Deny if bad token
    http-request deny deny_status 403 if !valid_token

    # Deny if exceeds limit
    http-request deny deny_status 429 if exceeds_limit

    server twice-per-minute-endpoint api:9999
